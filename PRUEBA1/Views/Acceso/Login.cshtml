@model PRUEBA1.ViewModels.LoginVM
@{
    Layout = null;
}
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="utf-8" />
    <title>Login - MiApp</title>
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no" />
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <style>
        :root {
            --primary-color: #4361ee;
            --secondary-color: #3f37c9;
            --accent-color: #4cc9f0;
            --light-color: #f8f9fa;
            --dark-color: #212529;
            --success-color: #4bb543;
            --error-color: #ff3860;
        }

        body {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            align-items: center;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        .login-container {
            background-color: white;
            backdrop-filter: blur(12px);
            border-radius: 12px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
            overflow: hidden;
            max-width: 420px;
            width: 100%;
            margin: 0 auto;
        }

        .login-header {
            background: linear-gradient(to right, var(--primary-color), var(--secondary-color));
            color: white;
            padding: 25px 20px;
            text-align: center;
        }

            .login-header h3 {
                margin: 0;
                font-weight: 600;
            }

        .login-body {
            padding: 30px;
        }

        .form-control {
            border-radius: 8px;
            padding: 12px 15px;
            border: 1px solid #e1e5eb;
            transition: all 0.3s;
        }

            .form-control:focus {
                border-color: var(--primary-color);
                box-shadow: 0 0 0 0.2rem rgba(67, 97, 238, 0.25);
            }

        .btn-login {
            background: linear-gradient(to right, var(--primary-color), var(--secondary-color));
            border: none;
            color: white;
            padding: 12px;
            border-radius: 8px;
            font-weight: 600;
            transition: all 0.3s;
        }

            .btn-login:hover {
                transform: translateY(-2px);
                box-shadow: 0 5px 15px rgba(67, 97, 238, 0.4);
            }

        .alert-message {
            padding: 10px 15px;
            border-radius: 8px;
            margin-top: 15px;
            font-size: 14px;
        }

        .alert-success {
            background-color: rgba(75, 181, 67, 0.1);
            color: var(--success-color);
            border: 1px solid rgba(75, 181, 67, 0.3);
        }

        .alert-error {
            background-color: rgba(255, 56, 96, 0.1);
            color: var(--error-color);
            border: 1px solid rgba(255, 56, 96, 0.3);
        }

        .register-link {
            text-align: center;
            margin-top: 20px;
            color: #6c757d;
        }

            .register-link a {
                color: var(--primary-color);
                text-decoration: none;
                font-weight: 500;
            }

                .register-link a:hover {
                    text-decoration: underline;
                }

        .input-icon {
            position: relative;
        }

            .input-icon i {
                position: absolute;
                left: 15px;
                top: 50%;
                transform: translateY(-50%);
                color: #6c757d;
                z-index: 3;
            }

            .input-icon input {
                padding-left: 40px;
            }

        .brand-logo {
            font-size: 24px;
            font-weight: 700;
            margin-bottom: 5px;
            display: inline-block;
        }

        .brand-subtitle {
            font-size: 14px;
            opacity: 0.9;
        }

        .field-validation-error {
            color: var(--error-color);
            font-size: 12px;
            margin-top: 5px;
            display: block;
        }

        .input-validation-error {
            border-color: var(--error-color) !important;
        }

        .input-valid {
            border-color: var(--success-color) !important;
        }

        .validation-summary-errors {
            background-color: rgba(255, 56, 96, 0.1);
            color: var(--error-color);
            padding: 10px;
            border-radius: 8px;
            margin-bottom: 15px;
            border: 1px solid rgba(255, 56, 96, 0.3);
        }

            .validation-summary-errors ul {
                margin: 0;
                padding-left: 20px;
            }

        .form-check {
            margin: 15px 0;
        }

        .form-check-input:checked {
            background-color: var(--primary-color);
            border-color: var(--primary-color);
        }

        .forgot-password {
            text-align: right;
            margin-bottom: 15px;
        }

            .forgot-password a {
                color: var(--primary-color);
                text-decoration: none;
                font-size: 14px;
            }

                .forgot-password a:hover {
                    text-decoration: underline;
                }
    </style>
    <!-- Font Awesome para iconos -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
</head>
<body>
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-md-5">
                <div class="login-container">
                    <div class="login-header">
                        <div class="brand-logo">Librería Lumen</div>
                        <div class="brand-subtitle">Sistema de acceso</div>
                    </div>
                    <div class="login-body">
                        <h3 class="text-center mb-4" style="color: var(--dark-color);">Iniciar Sesión</h3>

                        <!-- Mostrar errores de validación del modelo -->
                        @Html.ValidationSummary(true, "", new { @class = "validation-summary-errors" })

                        <form asp-controller="Acceso" asp-action="Login" method="post" autocomplete="off" id="loginForm">
                            <div class="mb-3 input-icon">
                                <i class="fas fa-envelope"></i>
                                <input class="form-control" type="email" asp-for="Correo" placeholder="Correo electrónico" />
                                @Html.ValidationMessageFor(m => m.Correo, "", new { @class = "field-validation-error" })
                            </div>

                            <div class="mb-3 input-icon">
                                <i class="fas fa-lock"></i>
                                <input class="form-control" type="password" asp-for="Contraseña" placeholder="Contraseña" />
                                @Html.ValidationMessageFor(m => m.Contraseña, "", new { @class = "field-validation-error" })
                            </div>

                            <div class="forgot-password">
                                <a href="#" id="forgotPasswordLink">¿Olvidaste tu contraseña?</a>
                            </div>

                            <div class="form-check mb-3">
                                <input class="form-check-input" type="checkbox" asp-for="Recordarme" id="recordarme" />
                                <label class="form-check-label" for="recordarme">
                                    Recordar mis datos
                                </label>
                            </div>

                            <button class="btn btn-login w-100" type="submit" id="submitBtn">Entrar</button>

                            <!-- Mensajes del servidor -->
                            @if (ViewData["Mensaje"] != null)
                            {
                                <div class="alert-message @((ViewData["Mensaje"].ToString().ToLower().Contains("error") || ViewData["Mensaje"].ToString().ToLower().Contains("incorrect") || ViewData["Mensaje"].ToString().ToLower().Contains("no encontrado")) ? "alert-error" : "alert-success") mt-3">
                                    <i class="fas @((ViewData["Mensaje"].ToString().ToLower().Contains("error") || ViewData["Mensaje"].ToString().ToLower().Contains("incorrect") || ViewData["Mensaje"].ToString().ToLower().Contains("no encontrado")) ? "fa-exclamation-circle" : "fa-check-circle")"></i>
                                    @ViewData["Mensaje"]
                                </div>
                            }

                            @if (TempData["MensajeExito"] != null)
                            {
                                <div class="alert-message alert-success mt-3">
                                    <i class="fas fa-check-circle"></i>
                                    @TempData["MensajeExito"]
                                </div>
                            }
                        </form>

                        <div class="register-link">
                            <small>¿No tienes una cuenta? <a asp-controller="Acceso" asp-action="Registro">Regístrate</a></small>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/jquery-validation/dist/jquery.validate.min.js"></script>
    <script src="~/lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const form = document.getElementById('loginForm');
            const submitBtn = document.getElementById('submitBtn');
            const forgotPasswordLink = document.getElementById('forgotPasswordLink');

            // Limpiar clases de validación al enfocar
            function clearValidationStyles(input) {
                input.addEventListener('focus', function() {
                    this.classList.remove('input-validation-error', 'input-valid');
                });
            }

            // Aplicar a todos los inputs
            const inputs = form.querySelectorAll('input');
            inputs.forEach(input => clearValidationStyles(input));

            // Validación visual en tiempo real
            inputs.forEach(input => {
                input.addEventListener('blur', function() {
                    if (this.value.trim() !== '' && this.checkValidity()) {
                        this.classList.add('input-valid');
                        this.classList.remove('input-validation-error');
                    } else if (this.value.trim() === '' && this.hasAttribute('required')) {
                        this.classList.add('input-validation-error');
                        this.classList.remove('input-valid');
                    }
                });
            });

            // Función para "Olvidé mi contraseña"
            forgotPasswordLink.addEventListener('click', function(e) {
                e.preventDefault();
                const email = document.getElementById('Correo').value;
                let message = 'Función de recuperación de contraseña.';

                if (email) {
                    message += ` Se enviará un enlace a: ${email}`;
                } else {
                    message += ' Por favor, ingresa tu correo electrónico primero.';
                }

                alert(message);
            });

            // Animación suave para los inputs
            $('.form-control').on('focus', function() {
                $(this).parent().css('transform', 'translateY(-2px)');
            }).on('blur', function() {
                $(this).parent().css('transform', 'translateY(0)');
            });

            // Auto-completar con demo (solo para desarrollo)
            function enableDemoMode() {
                const urlParams = new URLSearchParams(window.location.search);
                if (urlParams.get('demo') === 'true') {
                    document.getElementById('Correo').value = 'usuario@ejemplo.com';
                    document.getElementById('Contraseña').value = 'Demo123!';
                    console.log('Modo demo activado - Credenciales cargadas');
                }
            }

            enableDemoMode();
        });

        // Mostrar/ocultar contraseña (función adicional)
        function togglePasswordVisibility() {
            const passwordInput = document.getElementById('Contraseña');
            const type = passwordInput.getAttribute('type') === 'password' ? 'text' : 'password';
            passwordInput.setAttribute('type', type);
        }
    </script>
</body>
</html>